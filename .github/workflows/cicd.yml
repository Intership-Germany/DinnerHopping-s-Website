name: CI/CD DinnerHopping
jobs:
  deploy:
        uses: actions/upload-artifact@v4
        with:
          name: frontend-files
      - name: Checkout
        uses: actions/checkout@v4
    environment: VPS_HOST
    steps:
      - name: Download frontend files artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-files
      - name: Remote deploy git pull, build images, restart service, healthcheck
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_SSH_PORT }}
        run: |
          PORT=${DEPLOY_PORT:-22}
      - name: Remote deploy git pull, pull image, restart service, healthcheck
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_SSH_PORT }}
          REMOTE_GHCR_USER: ${{ secrets.REMOTE_GHCR_USER }}
          REMOTE_GHCR_PAT: ${{ secrets.REMOTE_GHCR_PAT }}
        run: |
          PORT=${DEPLOY_PORT:-22}
          ssh -o StrictHostKeyChecking=no -p ${PORT} ${DEPLOY_USER}@${DEPLOY_HOST} "REMOTE_GHCR_USER='${{ secrets.REMOTE_GHCR_USER }}' REMOTE_GHCR_PAT='${{ secrets.REMOTE_GHCR_PAT }}' bash -s" <<'EOF'
          set -euo pipefail
          cd /opt/dinnerhopping || exit 1
          # Ensure we are on main and up-to-date
          if git show-ref --verify --quiet refs/heads/main; then
            git checkout main
          else
            git fetch origin main:main
            git checkout main
          fi
          git fetch --all --prune
          git pull --ff-only
          if command -v docker-compose >/dev/null 2>&1; then
            COMPOSE_CMD=(docker-compose)
          else
            COMPOSE_CMD=(docker compose)
          fi
          sudo systemctl stop docker-compose-app.service || true
          sudo "${COMPOSE_CMD[@]}" -f deploy/production-docker-compose.yml build --pull
          sudo systemctl daemon-reload || true
          sudo systemctl start docker-compose-app.service
          # Healthcheck
          for i in {1..10}; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" https://dinnerhoppings.acrevon.fr/api/health || true)
            if [ "$code" = "200" ]; then
              echo "Healthcheck ok"
              exit 0
            fi
            sleep 6
          done
          echo "Healthcheck failed" >&2
          exit 1
          EOF
