name: CI/CD DinnerHopping

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/dinnerhopping-backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU and Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (for frontend files)
        uses: actions/checkout@v4

      - name: Start SSH agent and add key
        uses: webfactory/ssh-agent@v0.8.1
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Rsync frontend to server
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_SSH_PORT }}
        run: |
          PORT=${DEPLOY_PORT:-22}
          rsync -az --delete -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" frontend/public/ ${DEPLOY_USER}@${DEPLOY_HOST}:/var/www/dinnerhopping/

      - name: Remote deploy git pull, pull image, restart service, healthcheck
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_PORT: ${{ secrets.DEPLOY_SSH_PORT }}
          # Secrets to use on the remote server for docker login (optional; set these in the repo secrets if image is private)
          REMOTE_GHCR_USER: ${{ secrets.REMOTE_GHCR_USER }}
          REMOTE_GHCR_PAT: ${{ secrets.REMOTE_GHCR_PAT }}
        run: |
          PORT=${DEPLOY_PORT:-22}
          # Pass REMOTE_GHCR_USER / REMOTE_GHCR_PAT into remote shell
          ssh -o StrictHostKeyChecking=no -p ${PORT} ${DEPLOY_USER}@${DEPLOY_HOST} "REMOTE_GHCR_USER='${{ secrets.REMOTE_GHCR_USER }}' REMOTE_GHCR_PAT='${{ secrets.REMOTE_GHCR_PAT }}' bash -s" <<'EOF'
          set -euo pipefail
          cd /opt/dinnerhopping || exit 1

          # Ensure we are on main and up-to-date
          if git show-ref --verify --quiet refs/heads/main; then
            git checkout main
          else
            git fetch origin main:main
            git checkout main
          fi
          git fetch --all --prune
          git pull --ff-only

          # If REMOTE_GHCR_PAT/user provided, login to GHCR on the remote host so 'docker-compose pull' can pull private images
          if [ -n "${REMOTE_GHCR_PAT:-}" ] && [ -n "${REMOTE_GHCR_USER:-}" ]; then
            echo "${REMOTE_GHCR_PAT}" | sudo docker login ghcr.io -u "${REMOTE_GHCR_USER}" --password-stdin || true
          fi

          # Restart service using latest image
          sudo systemctl stop docker-compose-app.service || true
          sudo docker-compose -f deploy/production-docker-compose.yml pull || true
          sudo systemctl start docker-compose-app.service

          # Healthcheck
          for i in 1 2 3 4 5; do
            code=$(curl -sk -o /dev/null -w "%{http_code}" https://dinnerhoppings.acrevon.fr/api/openapi.json || true)
            if [ "$code" = "200" ]; then
              echo "Healthcheck ok"
              exit 0
            fi
            sleep 3
          done
          echo "Healthcheck failed" >&2
          exit 1
          EOF
